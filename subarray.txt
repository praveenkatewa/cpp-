#include<iostream>
using namespace std;
void printsubarrays(int *arr,int n){
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            cout<<"("<<i<<","<<j<<") "  ;
        }
        cout<<endl;
    }
    
}

int main(){
    int arr[5]={1,2,3,4,5};
    int n=5;
    
    printsubarrays(arr,n);
    
    return 0;
    
}

ans>>
(0,0) (0,1) (0,2) (0,3) (0,4) 
(1,1) (1,2) (1,3) (1,4) 
(2,2) (2,3) (2,4) 
(3,3) (3,4) 
(4,4) 

===============================================================================
using namespace std;
void printsubarrays(int *arr,int n){
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            // cout<<"("<<i<<","<<j<<") "  ;
            for(int k=i;k<=j;k++){
                cout<<arr[k];
            }
            cout<<", ";
        }
        cout<<endl;
    }
    
}

int main(){
    int arr[5]={1,2,3,4,5};
    int n=5;
    
    printsubarrays(arr,n);
    
    return 0;
    
}



1, 12, 123, 1234, 12345, 
2, 23, 234, 2345, 
3, 34, 345, 
4, 45, 
5, 
=======================================================================
max subarray sum

#include<iostream>
using namespace std;
void maxsubarraysum1(int*arr,int n){
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            int currsum=0;
            for(int k=i;k<=j;k++){
                currsum+=arr[k];
            }
            cout<<currsum<<",";
        }
        cout<<endl;
    }
}

int main(){
    int arr[6]={2,-3,6,-5,4,2};
    int n=sizeof(arr)/sizeof(int);
    
    maxsubarraysum1(arr,n);
    
    return 0;
    
}


ans>>>>
2,-1,5,0,4,6,
-3,3,-2,2,4,
6,1,5,7,
-5,-1,1,
4,6,
2,
==============================================================================
#include<iostream>
using namespace std;
void maxsubarraysum1(int*arr,int n){
    int maxsum=0;
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            int currsum=0;
            for(int k=i;k<=j;k++){
                currsum+=arr[k];
            }
            cout<<currsum<<",";
            maxsum=max(maxsum,currsum);
            
        }
        cout<<endl;
    }
    cout<<"maximum subarray sum="<<maxsum<<endl;
}

int main(){
    int arr[6]={2,-3,6,-5,4,2};
    int n=sizeof(arr)/sizeof(int);
    
    maxsubarraysum1(arr,n);
    
    return 0;
    
}

ans>>>
2,-1,5,0,4,6,
-3,3,-2,2,4,
6,1,5,7,
-5,-1,1,
4,6,
2,
maximum subarray sum=7
=========================================================================
method 2>

#include<bits/stdc++.h>
using namespace std;
void maxsubarraysum1(int*arr,int n){
    int maxsum=INT_MIN;
    for(int i=0;i<n;i++){
         int currsum=0;
        for(int j=i;j<n;j++){
           currsum+=arr[j];
          
            maxsum=max(maxsum,currsum);
            
        } 
    }
    cout<<"maximum subarray sum="<<maxsum<<endl;
}

int main(){
    int arr[6]={2,-3,6,-5,4,2};
    int n=sizeof(arr)/sizeof(int);
    
    maxsubarraysum1(arr,n);
    
    return 0;
    
}

ans>>
maximum subarray sum=7

=============================================================
kadane's algorithm 
#include<bits/stdc++.h>
using namespace std;
void maxsubarraysum1(int*arr,int n){
    int maxsum=INT_MIN;
    int currsum=0;
    
    for(int i=0;i<n;i++){
        currsum+=arr[i];
        maxsum=max(currsum,maxsum);
        if(currsum<0){
            currsum=0;
        }
    }
    cout<<"maximum subarray sum= "<<maxsum<<endl;

}

int main(){
    int arr[6]={2,-3,6,-5,4,2};
    int n=sizeof(arr)/sizeof(int);
    
    maxsubarraysum1(arr,n);
    
    return 0;
    
}

ans>>
maximum subarray sum= 7

