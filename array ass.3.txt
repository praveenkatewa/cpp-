 Write a C++ program to separate even and odd numbers in an array of integers. Put all even numbers first, and then odd numbers.
#include <bits/stdc++.h>
using namespace std;
void findEvenOddInArray(vector<int> &arr)
{
    int temp = arr[0];
    for (int i = 0; i < arr.size(); i++)
    {
        for (int j = 0; j <= i; j++)
        {
            if (arr[j] % 2 == 1)
            {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
    for (auto it : arr)
    {
        cout << it << " ";
    }
}
int main()
{
    vector<int> arr{1, 2, 3, 4, 5, 6, 7, 8, 9};
    findEvenOddInArray(arr);
    return 0; 
}

Write a C++ program to separate 0s and 1s from a given array of values 0 and 1.
#include <iostream>
#include <vector>
using namespace std;
int main()
{
    vector<int> arr{ 1,1,0,1,0,0,1,1}:
       
    for (int i = 0; i < arr.size(); i++)
    {
        for (int j = 0; j <= i; j++)
        {
            if (arr[j] == 1)
            {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
    for (auto it : arr)
    {
        cout << it << " ";
    }
    return 0; 
}


Write a C++ program to sort a given array of 0s, 1s and 2s. In the final array put all 0s first, then all 1s and all 2s last.

#include <iostream>
#include <vector>
using namespace std;
int main()
{
    vector<int> arr{1, 2, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0};
    int low = 0, mid = 0, high = arr.size() - 1;
    while (mid <= high)
    {
        switch (arr[mid])
        {
        case 0:
            swap(arr[low++], arr[mid++]);
            break;
        case 1:
            mid++;
            break;
        case 2:
            swap(arr[mid], arr[high--]);
            break;
default:
            break;
        }
    }
    for (auto it : arr)
    {
        cout << it << " ";
    }
    return 0; 
}

Write a C++ program to move all negative elements of an array of integers to the end of the array. This is done without changing the order of the positive and negative elements of the array.
#include <bits/stdc++.h>
using namespace std;
int main()
{
    vector<int> arr = {-1, -3, -5, -6, 1, -43, 34, 23, 0, 23};
    vector<int> result;
    for (int i = 0; i < arr.size(); i++)
    {
        if (arr[i] >= 0)
        {
            result.push_back(arr[i]);
        }
    }
    for (int i = 0; i < arr.size(); i++)
    {
        if (arr[i] < 0)
        {
            result.push_back(arr[i]);
        }
    }
    for (auto it : result)
    {
        cout << it << " ";
    }
    return 0; }

Write a C++ program to find the two repeating elements in a given array of integers.
#include "bits/stdc++.h"
using namespace std;
void findRepeatingNumber(vector<int> &arr)
{
    for (int i = 0; i < arr.size(); i++)
    {
        for (int j = i + 1; j < arr.size(); j++)
        {
            if (arr[i] == arr[j])
            {
                cout << arr[i] << " ";
            }
        }
    }
}
int main()
{
    vector<int> arr{1, 2, 2, 3, 3, 4, 4, 6, 6, 7, 7};
    findRepeatingNumber(arr);
}

Write a C++ program to find the missing element from two given arrays of integers except one element.
#include <iostream>
#include <vector>
using namespace std;
int findMissingElementIn2Array(vector<int> &arr1, vector<int> &arr2)
{
    int xo_r = 0;
    for (int i = 0; i < arr1.size(); i++)
    {
        xo_r ^= arr1[i];
    }
    for (int i = 0; i < arr2.size(); i++)
    {
        xo_r ^= arr2[i];
    }
    return {xo_r};
}
int main()
{
    vector<int> arr1{1, 2, 3, 5};
    vector<int> arr2{1, 2, 3, 5, 7};
    int ans = findMissingElementIn2Array(arr1, arr2);
    cout << "\n First array : ";
    for (auto it : arr1)
    {
        cout << it << " ";
    }
    cout << "\n Second array : ";
    for (auto it : arr2)
    {
        cout << it << " ";
    }
    cout << "\nThe missing ingredient is : " << ans << " ";
    return 0;
}
